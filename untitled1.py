# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WWhcQ7nndLzgC6JvYYQToXD9RpJDBd2a
"""

import numpy as np
from sklearn.cluster import KMeans
import pandas as pd

#especifica o caminho do arquivo CSV
caminho_arquivo = '/content/filmes_100_usuarios.csv'
 
df = pd.read_csv(caminho_arquivo)
 
#exibir o cabeçalho do arquivo para verificar
print(df.head())
 
#matriz simples de avaliaçoes dos filmes / drop jogar fora as linhas e colunas
mv_rating = df.drop(columns=["Unnamed: 0"]).values

#treinar modelo
# num de clusters(grupos)
nc = 2

#inicializando modelo
kmeans = KMeans (n_clusters=nc,
                 random_state=0,n_init=10)
#treinando o modelo
kmeans.fit(mv_rating)


#classificsado os usuarios
#indice é um comtrole de dados
grupos_indice = kmeans.predict(mv_rating)

#Exibir os dados
print("usuarios pertencentes ao seguinte grupo")
for i, cluster in enumerate(grupos_indice) :
  print(f"usuario {i+1} pertence ao grupo {cluster+1}") #i é uma formula de iteração

print("\nMv_ratong:")
for i in range(len(mv_rating)):
    assistidos = np.where(mv_rating[i] == 1)[0] + 1
    print(f"usuarios {i+1} assistiu aos filmes: {assistidos}")



#função que recomenda filmes
def recomendar_filmes(movie, mv_rating, grupos_indice):
  mv_rating = np.array(movie)

  #encontrar o grupo do usuario com base en seu vetor de filmes
  usuario_id = le(mv_rating)
  grupos_indice = kmeans.predict({movie})[0]

  #encontrar todos os usuarios no mesmo grupo
  usuarios_no_mesmo_grupo = [i for i in range(len(grupos_indice))
  if grupos_indice[i] == grupo_usuario]



  #filmes assistidos pelo usuario no mesmo grupo
  mv_recommend = set()
  for usuario in usuario_no_memso_grupo:
    mv_rating_usuario = np.where(mv_rating[usuario] ==1) [0]
    mv_recommend.update(mv_rating_usuario)


  #remover filmes que o usuario ja viu
  mv_recommend = mv_recommend - set(np.where(filmes == 1)[0])

  #ajustar os indices dos filmes recomendados (de volta para 1-based)
  mv_recommend = [filme + 1 for filme in mv_recommend]

  return sorted(mv_recommend)


#exemplo de uso da função de recomendar_filmes
  mv_rating_usuario = [0 ,1 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,1]  #vetor de filmes

#assistidos (por exemplo, assistiu aos filmes 1 e 3)
  mv_recommend = recomendar_filmes(mv_rating_usuario,
                                   mv_rating, grupos_indice)

  print(f"\nMv_rating: {mv_rating}")